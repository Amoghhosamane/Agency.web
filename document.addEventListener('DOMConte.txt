document.addEventListener('DOMContentLoaded', function () {
    // --- Cached DOM Elements ---
    const body = document.body;
    const themeToggleBtn = document.querySelector('.theme-toggle');
    const themeIcon = document.getElementById('theme-icon');
    const progressBar = document.querySelector('.progress-bar');
    const heroContent = document.querySelector('.hero-content');
    const sectionTitles = document.querySelectorAll('.section-title'); 
    const aboutSection = document.querySelector('.about');
    const aboutText = document.querySelector('.about-text');
    const aboutH2 = document.querySelector('.about-text h2');
    const aboutImage = document.querySelector('.about-image');
    const stats = document.querySelectorAll('.stat');
    const footerSections = document.querySelectorAll('.footer-section');
    const footerBottom = document.querySelector('.footer-bottom');

    // New: Get the quote form and message element
    const quoteForm = document.getElementById('quoteForm');
    const formMessage = document.getElementById('formMessage');

    // Store elements to be revealed in a mutable array, filtered as they are revealed
    let scrollRevealElements = Array.from(document.querySelectorAll('.scroll-reveal, .scroll-reveal-left, .scroll-reveal-right'));

    // --- Theme Toggle Functionality ---
    function applyTheme(isLightMode) {
        if (isLightMode) {
            body.classList.add('light-mode');
            themeIcon.classList.remove('fa-moon');
            themeIcon.classList.add('fa-sun');
            localStorage.setItem('theme', 'light');
        } else {
            body.classList.remove('light-mode');
            themeIcon.classList.remove('fa-sun');
            themeIcon.classList.add('fa-moon');
            localStorage.setItem('theme', 'dark');
        }
    }

    themeToggleBtn.addEventListener('click', () => {
        applyTheme(!body.classList.contains('light-mode'));
    });

    // Apply saved theme or default to dark
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light') {
        applyTheme(true);
    } else {
        applyTheme(false);
    }

    // --- Progress Bar (Scroll Indicator) ---
    function updateProgressBar() {
        const {
            scrollTop,
            scrollHeight,
            clientHeight
        } = document.documentElement;
        const scrollPercent = (scrollTop / (scrollHeight - clientHeight)) * 100;
        progressBar.style.width = scrollPercent + '%';
    }

    window.addEventListener('scroll', updateProgressBar);
    updateProgressBar(); // Initial call to set progress bar position

    // --- Hero Parallax Effect (Removed mousemove, simplified to CSS animation) ---
    // The parallax effect for hero content is now handled by CSS animations
    // and the `will-change` property on `.hero-content` for performance hints.

    // --- Scroll Reveal Animations ---
    const observerOptions = {
        root: null, // viewport
        rootMargin: '0px',
        threshold: 0.1 // Trigger when 10% of the item is visible
    };

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('revealed');

                // Specific animation triggers
                if (entry.target.classList.contains('section-title')) {
                    entry.target.classList.add('revealed');
                }
                if (entry.target === aboutSection) {
                    aboutText.querySelectorAll('h2 span').forEach(span => span.classList.add('revealed'));
                    aboutText.querySelectorAll('p').forEach(p => p.classList.add('revealed'));
                    stats.forEach(stat => stat.classList.add('revealed'));
                    aboutImage.classList.add('revealed');
                }
                // Stop observing once revealed
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);


    // Observe all initially hidden elements
    scrollRevealElements.forEach(el => {
        observer.observe(el);
    });

    // Special handling for about section text/image reveals
    observer.observe(aboutSection);

    // Observe footer sections and bottom
    footerSections.forEach(section => observer.observe(section));
    observer.observe(footerBottom);


    // --- Form Submission Handling ---
    quoteForm.addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent default form submission

        // In a real application, you would send this data to a server
        // using fetch() or XMLHttpRequest.
        // For demonstration, we'll just simulate a successful submission.

        const name = document.getElementById('name').value;
        const email = document.getElementById('email').value;
        const service = document.getElementById('service').value;

        // Basic validation
        if (!name || !email) {
            formMessage.textContent = 'Please fill in all required fields.';
            formMessage.classList.remove('success');
            formMessage.classList.add('error');
            formMessage.style.opacity = 1;
            return;
        }

        // Simulate API call
        formMessage.textContent = 'Sending your request...';
        formMessage.classList.remove('success', 'error');
        formMessage.style.opacity = 1;

        setTimeout(() => {
            // Simulate success
            formMessage.textContent = 'Thank you for your request! We will get back to you soon.';
            formMessage.classList.add('success');
            formMessage.classList.remove('error');
            quoteForm.reset(); // Clear the form

            // Hide message after a few seconds
            setTimeout(() => {
                formMessage.style.opacity = 0;
            }, 5000);

        }, 2000); // Simulate network delay
    });
});